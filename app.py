import streamlit as st
from dotenv import load_dotenv
import os
import requests
from urllib.parse import quote

import re

from book_assist import BookAssistant


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv(".env")
#GOOGLE_BOOKS_API_KEY = os.environ.get("GOOGLE_BOOKS_API_KEY")

NO_COVER_PLACEHOLDER_URL = "https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/No_image_available.svg/120px-No_image_available.svg.png"


import requests

# URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±–ª–æ–∂–∫–∞–º –≤ S3-–±–∞–∫–µ—Ç–µ
S3_BUCKET_URL = "https://storage.yandexcloud.net/book-covers"

def get_book_cover(book_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç URL –æ–±–ª–æ–∂–∫–∏ –∫–Ω–∏–≥–∏ –∏–∑ S3-–±–∞–∫–µ—Ç–∞.
    :param book_id: ID –∫–Ω–∏–≥–∏
    :return: URL –æ–±–ª–æ–∂–∫–∏ –∏–ª–∏ URL –∑–∞–≥–ª—É—à–∫–∏, –µ—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –æ–±–ª–æ–∂–∫–∏
    cover_url = f"{S3_BUCKET_URL}/{book_id}.jpg"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏
    if check_cover_exists(cover_url):
        return cover_url

    # –ï—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return NO_COVER_PLACEHOLDER_URL

def check_cover_exists(cover_url):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –≤ S3-–±–∞–∫–µ—Ç–µ.
    :param cover_url: URL –æ–±–ª–æ–∂–∫–∏
    :return: True, –µ—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ False
    """
    try:
        response = requests.head(cover_url)
        return response.status_code == 200
    except requests.exceptions.RequestException as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–ª–æ–∂–∫–∏: {e}")
        return False




# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BookAssistant
assistant = BookAssistant()


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–°–∫—Ä–æ–º–Ω—ã–π –∫–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å", page_icon="ü™±")


st.markdown(
    """
    <style>
    /* –°—Ç–∏–ª–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫ */
    .card {
        background-color: #15161f; /* –¢–µ–º–Ω—ã–π —Ñ–æ–Ω –∫–∞—Ä—Ç–æ—á–µ–∫ */
        color: #f5f5f5; /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ */
        border: 1px solid #444; /* –†–∞–º–∫–∞ */
        border-radius: 10px; /* –†–∞–¥–∏—É—Å —É–≥–ª–æ–≤ */
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.3); /* –¢–µ–Ω—å */
        min-height: 450px; /* –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ */
    }

    /* –ü–æ–ª–Ω–æ–µ —Å–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É */
    [data-testid="stToolbar"] {
        display: none !important;
    }

    /* –°–∫—Ä—ã—Ç–∏–µ —Ñ—É—Ç–µ—Ä–∞ Streamlit */
    footer {
        visibility: hidden !important;
        height: 0;
    }

    /* –°–∫—Ä—ã—Ç–∏–µ "Made with Streamlit" */
    .viewerBadge_container__1QSob {
        visibility: hidden !important;
    }
    </style>
    """,
    unsafe_allow_html=True,
)









# –ó–∞–≥–æ–ª–æ–≤–æ–∫
#st.title("–ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å ü™±")

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à—Ä–∏—Ñ—Ç–∞
st.markdown(
    """
    <h1 style="font-family: 'Noto Color Emoji', sans-serif; text-align: left;">
        –°–∫—Ä–æ–º–Ω—ã–π –∫–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å <img src="https://symbl-world.akamaized.net/i/webp/97/257dc253624102208f2f0d6c0059c6.webp" width="36">
    </h1>
    """,
    unsafe_allow_html=True,
)

# –û–ø–∏—Å–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
st.write("""
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∑–¥–µ—Å—å –æ–±–∏—Ç–∞–µ—Ç —Ç–æ—Ç–µ–º–Ω–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ –º–∏—Ä–∞ –∫–Ω–∏–≥! –ö–Ω–∏–∂–Ω—ã–π —á–µ—Ä–≤—å –∑–Ω–∞–µ—Ç –≤—Å—ë, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –æ –∫–Ω–∏–≥–∞—Ö –∏ –¥–∞–∂–µ –±–æ–ª—å—à–µ...
""")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
user_query = st.text_input("–°–ø—Ä–æ—Å–∏—Ç–µ —á–µ—Ä–≤—è –∏ –ø–æ–≥—Ä—É–∂–∞–π—Ç–µ—Å—å –≤ –º–∏—Ä –∫–Ω–∏–≥...", "")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞
if st.button("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é"):
    if not user_query.strip():
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.")
    else:
        with st.spinner("–ò—â–µ–º –∫–Ω–∏–≥–∏..."):
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            response = assistant.recommend_book(user_query)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if isinstance(response, str):
            st.write(response)
        else:
            for i, book in enumerate(response, start=1):
                annotation_match = re.search(r"–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è: (.*?)(?:\. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:|$)", book['annotation'])
                annotation = annotation_match.group(1).strip() if annotation_match else ""

                st.markdown(
                    f"""
                    <div class="card">
                        <h3>{i}. {book['title']}</h3>
                        <p><b>–ê–≤—Ç–æ—Ä:</b> {book['author']}</p>
                        <p><b>–ñ–∞–Ω—Ä:</b> {book['genres']}</p>
                        <p><b>–ì–æ–¥ –∏–∑–¥–∞–Ω–∏—è:</b> {book['year']}</p>
                        <img src="{get_book_cover(book['id'])}" width="150" style="float: left; margin-right: 15px;">
                        <p><b>–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:</b> {annotation}</p>
                        <a href="{book['link']}" target="_blank">–ß–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É</a>
                    </div>
                    """,
                    unsafe_allow_html=True,
                )


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
if st.button("–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"):
    st.rerun()